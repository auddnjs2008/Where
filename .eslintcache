[{"C:\\React\\where\\src\\index.js":"1","C:\\React\\where\\src\\Components\\App.js":"2","C:\\React\\where\\src\\Components\\map.js":"3","C:\\React\\where\\src\\Components\\Router.js":"4","C:\\React\\where\\src\\Routes\\Home.js":"5","C:\\React\\where\\src\\Routes\\Auth.js":"6","C:\\React\\where\\src\\firebase.js":"7","C:\\React\\where\\src\\Routes\\MyPage.js":"8","C:\\React\\where\\src\\Components\\Navigator.js":"9","C:\\React\\where\\src\\placeCode.js":"10"},{"size":168,"mtime":1608687167858,"results":"11","hashOfConfig":"12"},{"size":742,"mtime":1609243913226,"results":"13","hashOfConfig":"12"},{"size":1012,"mtime":1608797715804,"results":"14","hashOfConfig":"12"},{"size":687,"mtime":1609160381696,"results":"15","hashOfConfig":"12"},{"size":7303,"mtime":1609207784392,"results":"16","hashOfConfig":"12"},{"size":3419,"mtime":1609246324603,"results":"17","hashOfConfig":"12"},{"size":634,"mtime":1609114902406,"results":"18","hashOfConfig":"12"},{"size":6482,"mtime":1609230978373,"results":"19","hashOfConfig":"12"},{"size":429,"mtime":1609160782364,"results":"20","hashOfConfig":"12"},{"size":2622,"mtime":1609206687813,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1j0po3t",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\React\\where\\src\\index.js",[],["48","49"],"C:\\React\\where\\src\\Components\\App.js",["50"],"C:\\React\\where\\src\\Components\\map.js",["51","52","53","54","55"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst {kakao} =window;\r\nconst Map =({position,setMap})=>{\r\n  \r\nconst [marker,setMarker] =useState(null);\r\nconst [controller,setControll]=useState(new kakao.maps.ZoomControl());\r\n\r\n    \r\n useEffect(()=>{\r\n    \r\n\r\n    const container = document.getElementById(\"map\");\r\n    const options = {\r\n        center : new kakao.maps.LatLng(position[0], position[1]),\r\n        level:3,\r\n    };\r\n\r\n    const map = new kakao.maps.Map(container,options);\r\n    //맵이 생성 되면 마크를 생성한다. \r\n    setMarker(new kakao.maps.Marker({\r\n        map: map,\r\n        position: new kakao.maps.LatLng(position[0], position[1])\r\n    }))\r\n    // 컨트롤러 생성\r\n    map.addControl(controller,kakao.maps.ControlPosition.TOPRIGHT);\r\n    setMap(map);\r\n    \r\n },[position]);\r\n\r\n\r\n    return (<div id=\"map\" style={{width:\"500px\", height:\"500px\"}}>지도</div>)\r\n}\r\n\r\nexport default Map;","C:\\React\\where\\src\\Components\\Router.js",["56","57","58"],"import React, { useState } from \"react\";\r\nimport {HashRouter as Router,Redirect,Route,Switch} from \"react-router-dom\";\r\nimport Auth from \"../Routes/Auth\";\r\nimport Home from \"../Routes/Home\";\r\nimport MyPage from \"../Routes/MyPage\";\r\n\r\n\r\n\r\nconst AppRouter =({isLogIn, userObj}) =>{\r\n\r\n    return (\r\n        <Router>\r\n            {isLogIn ?\r\n            <>\r\n            <Route exact path=\"/\">\r\n                <Home userObj={userObj} />\r\n            </Route>\r\n            <Route path=\"/mypage\">\r\n                <MyPage userObj={userObj} />\r\n            </Route>\r\n            </>\r\n            :<Route exact path=\"/\"><Auth/></Route>}\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","C:\\React\\where\\src\\Routes\\Home.js",["59","60","61","62","63"],"import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Map from \"../Components/map\";\r\nimport { storeService } from \"../firebase\";\r\nimport { queryAllByAttribute } from \"@testing-library/react\";\r\nimport Navigator from \"../Components/Navigator\";\r\n\r\nconst {kakao,Kakao} =window;\r\n\r\n\r\nconst SearchWrapper = styled.div`\r\n    display:flex;\r\n\r\n`;\r\n\r\nconst SearchSubWrapper = styled.div``;\r\nconst ButtonWrapper = styled.div``;\r\n\r\nconst SearchForm =styled.form``;\r\n\r\nconst PlaceList=styled.ul`\r\n    li{\r\n        button{\r\n            &.display{\r\n                display:none;\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\nconst Home =({userObj}) =>{\r\n    const [position,setPosition]=useState([]); \r\n    const [search,setSearch]=useState(\"\");\r\n    const [map,setMap] =useState(null);\r\n    const [error,setError] =useState(\"\");\r\n    const [place,setPlace]=useState([]);\r\n    const [markers,setMarker] =useState([]); // 마커들을 검색하고 저장해둔 다음 지워줘야 한다. \r\n    const [bounds,setBounds]=useState();\r\n\r\n\r\n    const handleNavigate =(position)=>{\r\n        setPosition([position.coords.latitude,position.coords.longitude]);\r\n    }\r\n\r\n    const handleSearchFun = (result,status) => {\r\n        if(status  === kakao.maps.services.Status.OK){\r\n            setPlace(result);\r\n            const movePoint = new kakao.maps.LatLng(result[0].y,result[0].x);\r\n            map.panTo(movePoint);\r\n\r\n        }else{\r\n            setError(\"찾을 수 없습니다.\");\r\n        }\r\n\r\n    }\r\n\r\n    const handleListClick = (e)=>{\r\n        e.preventDefault();\r\n        const {target:{id}}=e;\r\n        const where = place[parseInt(id)];\r\n        \r\n        //클릭하는 순간 중심점을 이동시킨다. \r\n        const movePoint = new kakao.maps.LatLng(where.y,where.x);\r\n        map.panTo(movePoint);\r\n        //저장 버튼을 활성화 시킨다.  저장을 누르면 카테고리 별로 저장시킨다.\r\n       e.target.lastChild.classList.toggle(\"display\");\r\n    \r\n    }\r\n\r\n    const saveFunction = async (newSavePlace,save)=>{\r\n        if(save){\r\n            await storeService.collection(`where-${userObj.uid}`).add(newSavePlace);\r\n            console.log(\"저장성공\");\r\n        }else{\r\n            setError(\"이미 저장되어있는 장소입니다.\");\r\n            console.log(\"실패\");\r\n        }\r\n    }\r\n\r\n    const handleSaveClick=async (e)=>{\r\n       e.stopPropagation();\r\n       const attributes=[]; \r\n       let save=true;\r\n       const{target:{parentNode:{id}}}=e;\r\n       const object = place[id];\r\n       \r\n       //위 object를 파이어베이스에 저장해줘야 한다. //유저 아이디에 따라달리\r\n       // id의 따른 콜렉션을 만들어주고 그안에 장소들을 저장해준다. \r\n        let newPlace = {\r\n            ...object,creator:userObj.uid\r\n         };\r\n      \r\n        const test =await storeService.collection(`where-${userObj.uid}`).get(queryAllByAttribute);\r\n        test.forEach(item=>attributes.push(item.data()));\r\n\r\n        attributes.forEach(item=>item.place_name === newPlace.place_name ? save=false : \"\");\r\n        saveFunction(newPlace,save);\r\n    }\r\n       \r\n\r\n\r\n\r\n\r\n    const handleMapSizeClick =(e)=>{\r\n        const {target:{name}}=e;\r\n        const mapLevel = map.getLevel();\r\n        if(name === \"plus\"){\r\n            map.setLevel(mapLevel-1);\r\n        }else{\r\n            map.setLevel(mapLevel+1);\r\n        }\r\n\r\n    }\r\n\r\n    const handleMapKindClick=(e)=>{\r\n        const {target :{name}}=e;\r\n        if(name === \"roadmap\"){\r\n            map.setMapTypeId(kakao.maps.MapTypeId.ROADMAP); \r\n        }else{\r\n            map.setMapTypeId(kakao.maps.MapTypeId.HYBRID);   \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const onSubmit=(e)=>{\r\n        e.preventDefault();\r\n    \r\n        if(map){\r\n        const places = new kakao.maps.services.Places([map]);\r\n        places.keywordSearch(search,handleSearchFun);\r\n        }\r\n        setSearch(\"\");\r\n\r\n    }\r\n\r\n    const onChange =(e) =>{\r\n        const {target :{name,value}}=e;\r\n        if(name === \"place\"){\r\n            setSearch(value);\r\n         \r\n        }\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        if(navigator.geolocation)\r\n            navigator.geolocation.getCurrentPosition(handleNavigate);\r\n\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        const imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png';\r\n        const listes = document.querySelectorAll(\".list\");\r\n        const testBound = new kakao.maps.LatLngBounds();\r\n        //전 마커들을 지워준다. \r\n        for(let i=0; i<markers.length; i++){\r\n            markers[i].setMap(null);\r\n        }\r\n\r\n       for(let i=0; i<place.length ; i++){ \r\n            const imageSize = new kakao.maps.Size(36, 37);  // 마커 이미지의 크기\r\n            const imgOptions =  {\r\n                spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n                spriteOrigin : new kakao.maps.Point(0, (i*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n                offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n            };\r\n\r\n            const markerImage = new kakao.maps.MarkerImage(imageSrc,imageSize,imgOptions);\r\n\r\n            const newLat = new kakao.maps.LatLng(place[i].y,place[i].x);\r\n            const marker = new kakao.maps.Marker({\r\n                map:map,\r\n                position:newLat,\r\n                title:place[i].place_name,\r\n                image:markerImage,\r\n                clickable:true,\r\n                disableClickZoom: true\r\n            })\r\n            setMarker(prev => [...prev,marker]);\r\n            testBound.extend(newLat);\r\n         \r\n        }\r\n        setBounds(testBound);\r\n    \r\n    },[place])\r\n\r\n  \r\n\r\n\r\n\r\n    \r\n\r\n    return(\r\n        <>\r\n        <Navigator/>\r\n        <SearchWrapper>\r\n            <SearchSubWrapper>\r\n                {position !== [] ?\r\n                    <Map position={position} setMap={setMap}></Map> : <div>\"Loading...\"</div>\r\n                }\r\n                <ButtonWrapper>\r\n                    {place.length !== 0 ? <button onClick={()=>map.setBounds(bounds)}>한번에 보기</button>:\"\"}\r\n                    <button onClick={handleMapSizeClick} name=\"minus\">지도 축소</button>\r\n                    <button onClick={handleMapSizeClick} name=\"plus\">지도 확대</button> \r\n                    <button onClick={ handleMapKindClick} name=\"roadmap\">지도</button>\r\n                    <button onClick={ handleMapKindClick} name=\"skymap\">스카이뷰</button>\r\n                </ButtonWrapper>\r\n            </SearchSubWrapper>\r\n            <PlaceList>\r\n                {place.length !==0 ? place.map((item,index)=><li onClick={handleListClick} key={index} id={index} className=\"list\">{item.place_name}<button onClick={handleSaveClick} className=\"display\">저장</button></li>) : \"\" }\r\n            </PlaceList>\r\n            <SearchForm onSubmit={onSubmit}>\r\n                <input onChange={onChange} type=\"text\" placeholder=\"Search..\" name=\"place\" value={search}/>\r\n                <input type=\"submit\" value=\"Search\"/>\r\n            </SearchForm>\r\n        </SearchWrapper>\r\n     </>\r\n    )\r\n\r\n}\r\n\r\nexport default Home;","C:\\React\\where\\src\\Routes\\Auth.js",["64","65","66"],"C:\\React\\where\\src\\firebase.js",[],"C:\\React\\where\\src\\Routes\\MyPage.js",["67","68","69","70","71","72"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Navigator from \"../Components/Navigator\";\r\nimport { storeService } from \"../firebase\";\r\nimport { queryAllByAttribute } from \"@testing-library/react\";\r\nimport placeCode from \"../placeCode\";\r\nimport Map from \"../Components/map\";\r\n\r\nconst {kakao,Kakao} =window;\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display:flex;\r\n`;\r\nconst Container = styled.div``;\r\nconst StoreKind=styled.ul`\r\n    display:flex;\r\n    list-style:none;\r\n    li{\r\n        margin-right:10px;\r\n    }\r\n`;\r\n\r\nconst ShowWindow=styled.ul``;\r\n\r\nconst ItemList = styled.li`\r\n\r\n    button.display{\r\n        display:none;\r\n    }\r\n\r\n\r\n`;\r\n\r\n\r\n\r\n\r\nconst MyPage = ({userObj}) =>{\r\n    const [places,setPlaces]=useState([]);\r\n    const [position,setPosition]=useState([]);\r\n    const [map,setMap]=useState(null);\r\n    const [list,setList]=useState([]);\r\n    const [marker,setMarker]=useState([]);\r\n    const [bounds,setBounds]=useState();\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    const getData = async ()=>{\r\n        let testArray=[];\r\n        const test = await storeService.collection(`where-${userObj.uid}`).get(queryAllByAttribute);\r\n        test.forEach(item=>testArray.push(item.data()));\r\n        setPlaces(testArray);\r\n        setList(testArray);\r\n        setPosition([testArray[0].y,testArray[0].x]); // 임시 코드 \r\n    }\r\n    \r\n\r\n    const initMarkerDraw=()=>{\r\n        \r\n        const testArray=[];\r\n        const testBound = new kakao.maps.LatLngBounds();\r\n        \r\n        for(let i=0; i<places.length ; i++){ \r\n            \r\n            const imageSrc = placeCode[places[i].category_group_code].url;\r\n            const imageSize = new kakao.maps.Size(36, 37);  // 마커 이미지의 크기\r\n            const imageOption ={offset:new kakao.maps.Point(27,37)}; \r\n\r\n            const markerImage = new kakao.maps.MarkerImage(imageSrc,imageSize,imageOption);\r\n\r\n            const newLat = new kakao.maps.LatLng(places[i].y,places[i].x);\r\n            const marker = new kakao.maps.Marker({\r\n                map:map,\r\n                position:newLat,\r\n                title:places[i].place_name,\r\n                image:markerImage,\r\n                clickable:true,\r\n                disableClickZoom: true\r\n            })\r\n            //setMarker(prev => [...prev,marker]);\r\n            //testBound.extend(newLat);\r\n            marker.setMap(map);\r\n            testArray.push({marker,code:places[i].category_group_code});\r\n            setMarker(testArray);\r\n            testBound.extend(newLat);\r\n            setBounds(testBound);\r\n        }\r\n        map.setBounds(testBound);\r\n    }\r\n\r\n    const storeTitleClick=(e)=>{\r\n        const {target:{id}}=e;\r\n        let showMarker=[];\r\n        const testBound = new kakao.maps.LatLngBounds();\r\n\r\n        if(id !== \"기타\" && id !==\"전체보기\"){\r\n            //카테고리 타입이 id인 요소들을 찾아준다. \r\n            setList(places.filter(item=>item.category_group_name === id ? true : false));\r\n            \r\n        }else if(id ===\"기타\"){\r\n            setList(places.filter(item=>(item.category_group_name !== \"음식점\" && item.category_group_name !== \"카페\"&& item.category_group_name !== \"숙박\"\r\n            && item.category_group_name !== \"편의점\"&& item.category_group_name !== \"병원\"&& item.category_group_name !== \"약국\"&& item.category_group_name !== \"관광명소\") ? true: false))\r\n        }else{\r\n            setList(places);\r\n        }\r\n    \r\n        //리스트를 클릭하면 그 해당하는 리스트 마커만 표시해준다.\r\n        if(id !== \"전체보기\"){ \r\n            for(let i=0; i<marker.length ; i++){\r\n                if(placeCode[marker[i].code].title === id){\r\n                    showMarker.push(marker[i]);\r\n                    marker[i].marker.setMap(map);\r\n                    testBound.extend(new kakao.maps.LatLng(places[i].y,places[i].x));    \r\n                \r\n                }else{\r\n                    marker[i].marker.setMap(null);\r\n                }\r\n            }\r\n\r\n            if(showMarker.length !== 0) // 리스트에 뭐가 있을때만  그 리스트의 목록들 중심좌표로 이동\r\n                map.setBounds(testBound);\r\n            else\r\n                map.setBounds(bounds);\r\n        }else{\r\n            marker.forEach(item =>item.marker.setMap(map));\r\n            showMarker=marker;\r\n            map.setBounds(bounds);\r\n        }\r\n\r\n        // 그 리스트들만 보이게 중심좌표 이동 \r\n         \r\n    \r\n    }\r\n\r\n    const listItemClick =(e) =>{\r\n        const {target :{lastChild}}=e;\r\n        lastChild.classList.toggle(\"display\");\r\n    }\r\n    \r\n    const shareBtnClick =(e) =>{\r\n       e.stopPropagation();\r\n       const {target:{id}}=e;\r\n       const [place] = places.filter(item=>item.id === id);\r\n       //친구한테 공유를 해줘야한다. \r\n    }\r\n   \r\n\r\n\r\n    \r\n    useEffect(()=>{\r\n        getData();  \r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n       if(map){\r\n        initMarkerDraw();    \r\n       } \r\n    },[map])\r\n\r\n    //1.음식점 2.카페 3.숙박 4.편의점 5.병원 6.약국 7.관광명소 8.\r\n\r\n    return (\r\n      <>\r\n      <Navigator/>\r\n      <Wrapper>\r\n        <Map position={position} setMap={setMap}></Map>\r\n        <Container>\r\n            <StoreKind>\r\n                <li key=\"0\" onClick={storeTitleClick} id=\"전체보기\">전체보기</li> \r\n                <li key=\"1\" onClick={storeTitleClick} id=\"음식점\">음식점</li>\r\n                <li key=\"2\" onClick={storeTitleClick} id=\"카페\">카페</li>\r\n                <li key=\"3\" onClick={storeTitleClick} id=\"숙박\">숙박</li>\r\n                <li key=\"4\" onClick={storeTitleClick} id=\"편의점\">편의점</li>\r\n                <li key=\"5\" onClick={storeTitleClick} id=\"병원\">병원</li>\r\n                <li key=\"6\" onClick={storeTitleClick} id=\"약국\">약국</li>\r\n                <li key=\"7\" onClick={storeTitleClick} id=\"관광명소\">관광명소</li>\r\n                <li key=\"8\" onClick={storeTitleClick} id=\"기타\">기타</li>\r\n            </StoreKind>\r\n            <ShowWindow>\r\n                {list.length !==0 ? list.map(item=><ItemList   onClick={listItemClick} key={item.id}>{item.place_name}<button id={item.id} onClick={shareBtnClick} className=\"display\">공유</button></ItemList>) : \"\"}\r\n            </ShowWindow>\r\n        </Container>\r\n      </Wrapper>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default MyPage;","C:\\React\\where\\src\\Components\\Navigator.js",["73"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Container =styled.ul``;\r\n\r\nconst SLink=styled(Link)``;\r\n\r\n\r\n\r\nconst Navigator = () =>{\r\n    return(\r\n    <Container>\r\n        <li><SLink to=\"/\">Home</SLink></li>\r\n        <li><SLink to=\"/mypage\">MyPage</SLink></li>\r\n    </Container>\r\n    )\r\n}\r\n\r\nexport default Navigator;","C:\\React\\where\\src\\placeCode.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":11},{"ruleId":"78","severity":1,"message":"82","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":14},{"ruleId":"78","severity":1,"message":"83","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":17},{"ruleId":"78","severity":1,"message":"84","line":10,"column":8,"nodeType":"80","messageId":"81","endLine":10,"endColumn":14},{"ruleId":"78","severity":1,"message":"85","line":11,"column":19,"nodeType":"80","messageId":"81","endLine":11,"endColumn":30},{"ruleId":"86","severity":1,"message":"87","line":33,"column":4,"nodeType":"88","endLine":33,"endColumn":14,"suggestions":"89"},{"ruleId":"78","severity":1,"message":"90","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"91","line":2,"column":30,"nodeType":"80","messageId":"81","endLine":2,"endColumn":38},{"ruleId":"78","severity":1,"message":"92","line":2,"column":45,"nodeType":"80","messageId":"81","endLine":2,"endColumn":51},{"ruleId":"78","severity":1,"message":"83","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":17},{"ruleId":"78","severity":1,"message":"93","line":9,"column":14,"nodeType":"80","messageId":"81","endLine":9,"endColumn":19},{"ruleId":"78","severity":1,"message":"94","line":39,"column":12,"nodeType":"80","messageId":"81","endLine":39,"endColumn":17},{"ruleId":"78","severity":1,"message":"95","line":160,"column":15,"nodeType":"80","messageId":"81","endLine":160,"endColumn":21},{"ruleId":"86","severity":1,"message":"96","line":192,"column":7,"nodeType":"88","endLine":192,"endColumn":14,"suggestions":"97"},{"ruleId":"78","severity":1,"message":"83","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":17},{"ruleId":"78","severity":1,"message":"98","line":5,"column":8,"nodeType":"80","messageId":"81","endLine":5,"endColumn":18},{"ruleId":"78","severity":1,"message":"99","line":31,"column":13,"nodeType":"80","messageId":"81","endLine":31,"endColumn":17},{"ruleId":"78","severity":1,"message":"100","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":13},{"ruleId":"78","severity":1,"message":"83","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":17},{"ruleId":"78","severity":1,"message":"93","line":11,"column":14,"nodeType":"80","messageId":"81","endLine":11,"endColumn":19},{"ruleId":"78","severity":1,"message":"101","line":151,"column":15,"nodeType":"80","messageId":"81","endLine":151,"endColumn":20},{"ruleId":"86","severity":1,"message":"102","line":160,"column":7,"nodeType":"88","endLine":160,"endColumn":9,"suggestions":"103"},{"ruleId":"86","severity":1,"message":"104","line":166,"column":7,"nodeType":"88","endLine":166,"endColumn":12,"suggestions":"105"},{"ruleId":"78","severity":1,"message":"83","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":17},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'Map' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'PropTypes' is defined but never used.","'marker' is assigned a value but never used.","'setControll' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'controller' and 'setMap'. Either include them or remove the dependency array. If 'setMap' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["108"],"'useState' is defined but never used.","'Redirect' is defined but never used.","'Switch' is defined but never used.","'Kakao' is assigned a value but never used.","'error' is assigned a value but never used.","'listes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'map' and 'markers'. Either include them or remove the dependency array.",["109"],"'KaKaoLogin' is defined but never used.","'user' is assigned a value but never used.","'axios' is defined but never used.","'place' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["110"],"React Hook useEffect has a missing dependency: 'initMarkerDraw'. Either include it or remove the dependency array.",["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [controller, position, setMap]",{"range":"120","text":"121"},"Update the dependencies array to be: [map, markers, place]",{"range":"122","text":"123"},"Update the dependencies array to be: [getData]",{"range":"124","text":"125"},"Update the dependencies array to be: [initMarkerDraw, map]",{"range":"126","text":"127"},[851,861],"[controller, position, setMap]",[5429,5436],"[map, markers, place]",[4729,4731],"[getData]",[4823,4828],"[initMarkerDraw, map]"]