[{"C:\\React\\where\\src\\index.js":"1","C:\\React\\where\\src\\Components\\App.js":"2","C:\\React\\where\\src\\firebase.js":"3","C:\\React\\where\\src\\Components\\map.js":"4","C:\\React\\where\\src\\Components\\Router.js":"5","C:\\React\\where\\src\\Routes\\Home.js":"6","C:\\React\\where\\src\\Routes\\Auth.js":"7","C:\\React\\where\\src\\Routes\\MyPage.js":"8","C:\\React\\where\\src\\Components\\Navigator.js":"9","C:\\React\\where\\src\\placeCode.js":"10","C:\\React\\where\\src\\Components\\roadview.js":"11","C:\\React\\where\\src\\Components\\MapButton.js":"12","C:\\React\\where\\src\\Components\\SocialLogin.js":"13","C:\\React\\where\\src\\Components\\EmailLogin.js":"14","C:\\React\\where\\src\\Components\\HomeMapWrapper.js":"15","C:\\React\\where\\src\\Components\\HomeSearchList.js":"16","C:\\React\\where\\src\\Components\\HomeSearchForm.js":"17","C:\\React\\where\\src\\Components\\MyMapWrapper.js":"18","C:\\React\\where\\src\\Components\\MyStoreKind.js":"19","C:\\React\\where\\src\\Components\\MyListWindow.js":"20","C:\\React\\where\\src\\Components\\MyListPackShare.js":"21"},{"size":168,"mtime":1608687167858,"results":"22","hashOfConfig":"23"},{"size":742,"mtime":1610366387500,"results":"24","hashOfConfig":"23"},{"size":634,"mtime":1609114902406,"results":"25","hashOfConfig":"23"},{"size":1827,"mtime":1610094287559,"results":"26","hashOfConfig":"23"},{"size":674,"mtime":1610366504739,"results":"27","hashOfConfig":"23"},{"size":3730,"mtime":1610366536723,"results":"28","hashOfConfig":"23"},{"size":1593,"mtime":1609936555325,"results":"29","hashOfConfig":"23"},{"size":4681,"mtime":1610371191063,"results":"30","hashOfConfig":"23"},{"size":2145,"mtime":1610326011722,"results":"31","hashOfConfig":"23"},{"size":3059,"mtime":1610328327619,"results":"32","hashOfConfig":"23"},{"size":7845,"mtime":1610366180342,"results":"33","hashOfConfig":"23"},{"size":4298,"mtime":1610366436384,"results":"34","hashOfConfig":"23"},{"size":3049,"mtime":1610366556595,"results":"35","hashOfConfig":"23"},{"size":2490,"mtime":1609936687704,"results":"36","hashOfConfig":"23"},{"size":4296,"mtime":1610366269669,"results":"37","hashOfConfig":"23"},{"size":5960,"mtime":1610366219238,"results":"38","hashOfConfig":"23"},{"size":2408,"mtime":1610366241123,"results":"39","hashOfConfig":"23"},{"size":4358,"mtime":1610326664202,"results":"40","hashOfConfig":"23"},{"size":4739,"mtime":1610409558242,"results":"41","hashOfConfig":"23"},{"size":5203,"mtime":1610410459099,"results":"42","hashOfConfig":"23"},{"size":3921,"mtime":1610410629840,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1j0po3t",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\React\\where\\src\\index.js",[],["93","94"],"C:\\React\\where\\src\\Components\\App.js",[],"C:\\React\\where\\src\\firebase.js",[],"C:\\React\\where\\src\\Components\\map.js",["95","96","97"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst Marker = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -80%);\r\n  opacity: 0.7;\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: #e74c3c;\r\n  border-radius: 50%;\r\n  display: none;\r\n  z-index: 2;\r\n  @keyframes Marker {\r\n    0% {\r\n      opacity: 0.7;\r\n      width: 50px;\r\n      height: 50px;\r\n    }\r\n    100% {\r\n      opacity: 0;\r\n      width: 0px;\r\n      height: 0px;\r\n      display: none;\r\n    }\r\n  }\r\n  animation: Marker 1s linear infinite;\r\n`;\r\n\r\nconst Map = ({ position, setMap, isMyPage }) => {\r\n  const [marker, setMarker] = useState(null);\r\n  const [controller, setControll] = useState(new kakao.maps.ZoomControl());\r\n  const positionObj = new kakao.maps.LatLng(position[0], position[1]);\r\n  useEffect(() => {\r\n    const container = document.getElementById(\"map\");\r\n    const options = {\r\n      center: positionObj,\r\n      level: 3,\r\n    };\r\n\r\n    const map = new kakao.maps.Map(container, options);\r\n    //맵이 생성 되면 마크를 생성한다.\r\n    if (!isMyPage) {\r\n      setMarker(\r\n        new kakao.maps.Marker({\r\n          map: map,\r\n          position: positionObj,\r\n        })\r\n      );\r\n    }\r\n\r\n    map.addControl(controller, kakao.maps.ControlPosition.TOPRIGHT);\r\n    setMap(map);\r\n  }, [position]);\r\n\r\n  return (\r\n    <div\r\n      id=\"map\"\r\n      style={{\r\n        position: \"relative\",\r\n        top: \"0\",\r\n        width: \"99vw\",\r\n        height: \"99vh\",\r\n      }}\r\n    >\r\n      <Marker className=\"center\"></Marker>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n\r\nMap.propTypes = {\r\n  position: PropTypes.array.isRequired,\r\n  setMap: PropTypes.func,\r\n  isMyPage: PropTypes.bool,\r\n};\r\n","C:\\React\\where\\src\\Components\\Router.js",[],"C:\\React\\where\\src\\Routes\\Home.js",["98","99","100"],"import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Navigator from \"../Components/Navigator\";\r\nimport HomeMapWrapper from \"../Components/HomeMapWrapper\";\r\nimport HomeSearchList from \"../Components/HomeSearchList\";\r\nimport HomeSearchForm from \"../Components/HomeSearchForm\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst SearchWrapper = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n  top: 0;\r\n`;\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [position, setPosition] = useState([]);\r\n\r\n  const [map, setMap] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n  const [place, setPlace] = useState([]);\r\n  const [markers, setMarker] = useState([]); // 마커들을 검색하고 저장해둔 다음 지워줘야 한다.\r\n  const [bounds, setBounds] = useState();\r\n  const [roadview, setRoadview] = useState({}); // 리스트를 클릭했을때  넘겨줄 장소정보\r\n  const [roadMapObj, setRoadObj] = useState(null);\r\n\r\n  const handleNavigate = (position) => {\r\n    setPosition([position.coords.latitude, position.coords.longitude]);\r\n    setRoadview({\r\n      place_name: \"나의 위치\",\r\n      y: position.coords.latitude,\r\n      x: position.coords.longitude,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(handleNavigate);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const imageSrc =\r\n      \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\";\r\n    const listes = document.querySelectorAll(\".list\");\r\n    const testBound = new kakao.maps.LatLngBounds();\r\n    //전 마커들을 지워준다.\r\n    for (let i = 0; i < markers.length; i++) {\r\n      markers[i].setMap(null);\r\n    }\r\n\r\n    for (let i = 0; i < place.length; i++) {\r\n      const imageSize = new kakao.maps.Size(36, 37); // 마커 이미지의 크기\r\n      const imgOptions = {\r\n        spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n        spriteOrigin: new kakao.maps.Point(0, i * 46 + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n        offset: new kakao.maps.Point(13, 37), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n      };\r\n\r\n      const markerImage = new kakao.maps.MarkerImage(\r\n        imageSrc,\r\n        imageSize,\r\n        imgOptions\r\n      );\r\n\r\n      const newLat = new kakao.maps.LatLng(place[i].y, place[i].x);\r\n      const marker = new kakao.maps.Marker({\r\n        map: map,\r\n        position: newLat,\r\n        title: place[i].place_name,\r\n        image: markerImage,\r\n        clickable: true,\r\n        disableClickZoom: true,\r\n      });\r\n\r\n      // 로드뷰에 나타나는 마커\r\n\r\n      setMarker((prev) => [...prev, marker]);\r\n\r\n      testBound.extend(newLat);\r\n    }\r\n    setBounds(testBound);\r\n  }, [place]);\r\n\r\n  return (\r\n    <>\r\n      <Navigator />\r\n      <SearchWrapper>\r\n        <HomeMapWrapper\r\n          position={position}\r\n          map={map}\r\n          setMap={setMap}\r\n          setRoadObj={setRoadObj}\r\n          roadMapObj={roadMapObj}\r\n          roadview={roadview}\r\n          setRoadview={setRoadview}\r\n          bounds={bounds}\r\n          place={place}\r\n        ></HomeMapWrapper>\r\n        <HomeSearchList\r\n          place={place}\r\n          map={map}\r\n          setRoadview={setRoadview}\r\n          setError={setError}\r\n          userObj={userObj}\r\n        ></HomeSearchList>\r\n        <HomeSearchForm\r\n          setPlace={setPlace}\r\n          map={map}\r\n          setError={setError}\r\n        ></HomeSearchForm>\r\n      </SearchWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\nHome.propTypes = {\r\n  userObj: PropTypes.object,\r\n};\r\n","C:\\React\\where\\src\\Routes\\Auth.js",[],"C:\\React\\where\\src\\Routes\\MyPage.js",["101","102"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Navigator from \"../Components/Navigator\";\r\nimport { storeService } from \"../firebase\";\r\nimport { queryAllByAttribute } from \"@testing-library/react\";\r\nimport placeCode from \"../placeCode\";\r\nimport MyMapWrapper from \"../Components/MyMapWrapper\";\r\nimport MyStoreKind from \"../Components/MyStoreKind\";\r\nimport MyListWindow from \"../Components/MyListWindow\";\r\nimport MyListPackShare from \"../Components/MyListPackShare\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n  top: 0;\r\n`;\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  z-index: 3;\r\n  top: 0;\r\n  right: 100px;\r\n`;\r\n\r\nconst MyPage = ({ userObj }) => {\r\n  const [places, setPlaces] = useState([]); // 내가 가지고 있는 장소들\r\n  const [position, setPosition] = useState([]);\r\n  const [map, setMap] = useState(null);\r\n  const [list, setList] = useState([]); // 장소 타이틀을 클릭했을때  목록들\r\n  const [marker, setMarker] = useState([]);\r\n  const [bounds, setBounds] = useState();\r\n  const [roadViewObj, setRoadViewObj] = useState(null); // 로드맵 안내표 받아오기\r\n  const [roadview, setRoadview] = useState(null); // 로드맵 받아오기\r\n\r\n  const packShare = useRef();\r\n\r\n  const getData = async () => {\r\n    let testArray = [];\r\n    const test = await storeService\r\n      .collection(`where-${userObj.uid}`)\r\n      .get(queryAllByAttribute);\r\n    test.forEach((item) => testArray.push(item.data()));\r\n    setPlaces(testArray);\r\n    setList(testArray);\r\n    testArray.length !== 0\r\n      ? setPosition([parseInt(testArray[0].y), parseInt(testArray[0].x)])\r\n      : setPosition([37.264842, 126.96033]); // 임시 코드\r\n    testArray.length !== 0\r\n      ? setRoadViewObj(testArray[0])\r\n      : setRoadViewObj({ y: 37.264842, x: 126.96033, place_name: \"광화문 \" });\r\n  };\r\n\r\n  const initMarkerDraw = () => {\r\n    const testArray = [];\r\n    const testBound = new kakao.maps.LatLngBounds();\r\n    for (let i = 0; i < places.length; i++) {\r\n      const imageSrc = places[i].category_group_code\r\n        ? placeCode[places[i].category_group_code].url\r\n        : placeCode[\"PS3\"].url;\r\n      const imageSize = new kakao.maps.Size(36, 37); // 마커 이미지의 크기\r\n      const imageOption = { offset: new kakao.maps.Point(27, 37) };\r\n\r\n      const markerImage = new kakao.maps.MarkerImage(\r\n        imageSrc,\r\n        imageSize,\r\n        imageOption\r\n      );\r\n\r\n      const newLat = new kakao.maps.LatLng(places[i].y, places[i].x);\r\n      const marker = new kakao.maps.Marker({\r\n        map: map,\r\n        position: newLat,\r\n        title: places[i].place_name,\r\n        image: markerImage,\r\n        clickable: true,\r\n        disableClickZoom: true,\r\n      });\r\n      //setMarker(prev => [...prev,marker]);\r\n      //testBound.extend(newLat);\r\n      marker.setMap(map);\r\n      testArray.push({ marker, code: places[i].category_group_code });\r\n      setMarker(testArray);\r\n      testBound.extend(newLat);\r\n      setBounds(testBound);\r\n    }\r\n    map.setBounds(testBound);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (map && places.length !== 0) {\r\n      initMarkerDraw();\r\n    } else if (map) {\r\n      map.setLevel(15);\r\n    }\r\n  }, [map]);\r\n\r\n  //1.음식점 2.카페 3.숙박 4.편의점 5.병원 6.약국 7.관광명소 8.\r\n\r\n  return (\r\n    <>\r\n      <Navigator />\r\n      <Wrapper>\r\n        <MyMapWrapper\r\n          map={map}\r\n          setMap={setMap}\r\n          position={position}\r\n          roadViewObj={roadViewObj}\r\n          roadview={roadview}\r\n          places={places}\r\n          bounds={bounds}\r\n          setRoadViewObj={setRoadViewObj}\r\n          setRoadview={setRoadview}\r\n        ></MyMapWrapper>\r\n        <Container>\r\n          <MyStoreKind\r\n            map={map}\r\n            setList={setList}\r\n            places={places}\r\n            marker={marker}\r\n            bounds={bounds}\r\n          ></MyStoreKind>\r\n          <MyListWindow\r\n            userObj={userObj}\r\n            map={map}\r\n            places={places}\r\n            setPlaces={setPlaces}\r\n            setRoadViewObj={setRoadViewObj}\r\n            list={list}\r\n            setList={setList}\r\n            packShare={packShare}\r\n          ></MyListWindow>\r\n        </Container>\r\n      </Wrapper>\r\n      <MyListPackShare\r\n        packShare={packShare}\r\n        places={places}\r\n        className=\"packShare\"\r\n      ></MyListPackShare>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyPage;\r\n\r\nMyPage.propTypes = {\r\n  userObj: PropTypes.object,\r\n};\r\n","C:\\React\\where\\src\\Components\\Navigator.js",[],"C:\\React\\where\\src\\placeCode.js",[],"C:\\React\\where\\src\\Components\\roadview.js",["103","104","105","106"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { useState, useEffect } from \"react\";\n\nconst { kakao } = window;\n\nconst Container = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  z-index: 2;\n`;\n\nconst Roadview = ({ roadViewObj, map, setRoadObj, setRoadview }) => {\n  const [mapWalker, setMapWalker] = useState(null);\n  const [marker, setMarker] = useState(null);\n  const [roadmap, setRoadmap] = useState(null);\n\n  //const [start, setStart] = useState([]); // [startY,startX]\n  //const [startOverlayPoint, setPoint] = useState(null);\n  let startOverlayPoint = null;\n  let start = [];\n  const onMouseDown = (e) => {\n    if (e.preventDefault()) {\n      e.preventDefault();\n    } else {\n      e.returnValue = true;\n    }\n\n    const proj = map.getProjection();\n    const overlayPos = mapWalker.walker.getPosition();\n\n    kakao.maps.event.preventMap();\n    start = [e.clientY, e.clientX];\n\n    startOverlayPoint = proj.containerPointFromCoords(overlayPos);\n    // 로드맵의 포지션을 바꿔주야 한다.\n\n    addEventHandle(document, \"mousemove\", onMouseMove);\n  };\n\n  const onMouseMove = (e) => {\n    if (e.preventDefault) {\n      e.preventDefault();\n    } else {\n      e.returnValue = false;\n    }\n\n    const proj = map.getProjection();\n    const deltaX = start[1] - e.clientX;\n    const deltaY = start[0] - e.clientY;\n    const newPoint = new kakao.maps.Point(\n      startOverlayPoint.x - deltaX,\n      startOverlayPoint.y - deltaY\n    );\n    const newPos = proj.coordsFromContainerPoint(newPoint);\n    mapWalker.walker.setPosition(newPos);\n  };\n\n  const onMouseUp = (e) => {\n    map.setCenter(mapWalker.walker.getPosition());\n    // 로드뷰 셋팅을 다시 해줘야 한다.\n    setRoadview({\n      y: mapWalker.walker.getPosition().Ma,\n      x: mapWalker.walker.getPosition().La,\n      place_name: \"여행중\",\n    });\n    removeEventHandle(document, \"mousemove\", onMouseMove);\n  };\n\n  const addEventHandle = (target, type, callback) => {\n    if (target.addEventListener) {\n      target.addEventListener(type, callback);\n    }\n  };\n\n  const removeEventHandle = (target, type, callback) => {\n    if (target.removeEventListener) {\n      target.removeEventListener(type, callback);\n    }\n  };\n\n  function MapWalker(position) {\n    // 맵 아이콘 생성 함수\n    const content = document.createElement(\"div\");\n    const figure = document.createElement(\"div\");\n    const angleBack = document.createElement(\"div\");\n    //const mapWrapper = document.querySelector(\".mapwrapper\");\n\n    content.className = \"MapWalker\";\n    figure.className = \"figure\";\n    angleBack.className = \"angleBack\";\n\n    content.appendChild(angleBack);\n    content.appendChild(figure);\n    //mapWrapper.appendChild(content);\n    const walker = new kakao.maps.CustomOverlay({\n      position: position,\n      content: content,\n      yAnchor: 1,\n    });\n\n    this.walker = walker;\n    this.content = content;\n  }\n\n  MapWalker.prototype.setAngle = function (angle) {\n    const threshold = 22.5; //이미지가 변화되어야 되는(각도가 변해야되는) 임계 값\n    for (let i = 0; i < 16; i++) {\n      //각도에 따라 변화되는 앵글 이미지의 수가 16개\n      if (angle > threshold * i && angle < threshold * (i + 1)) {\n        //각도(pan)에 따라 아이콘의 class명을 변경\n        const className = \"m\" + i;\n        this.content.className = this.content.className.split(\" \")[0];\n        this.content.className += \" \" + className;\n        break;\n      }\n    }\n  };\n\n  MapWalker.prototype.setPosition = function (position) {\n    this.walker.setPosition(position);\n  };\n\n  MapWalker.prototype.setMap = function (map) {\n    this.walker.setMap(map);\n  };\n\n  useEffect(() => {\n    const roadviewContainer = document.getElementById(\"roadview\"); //로드뷰를 표시할 div\n\n    const roadview = new kakao.maps.Roadview(roadviewContainer); //로드뷰 객체\n    const roadviewClient = new kakao.maps.RoadviewClient(); //좌표로부터 로드뷰 파노ID를 가져올 로드뷰 helper객체\n    const positionObj = new kakao.maps.LatLng(roadViewObj.y, roadViewObj.x);\n    let roadMarker = null;\n\n    roadviewClient.getNearestPanoId(positionObj, 50, function (panoId) {\n      if (panoId != null) {\n        roadview.setPanoId(panoId, positionObj); //panoId와 중심좌표를 통해 로드뷰 실행\n        document.querySelector(\"#roadview\").style.opacity = \"1\";\n        if (marker) marker.setMap(null); // 만약 마커가 있으면 지워줘야 한다.\n\n        roadMarker = new kakao.maps.Marker({\n          position: positionObj,\n          map: roadview,\n          //title: where.place_name,\n        });\n\n        // 커스텀 오버레이를 생성한다.  (검색창으로 이어질 수 있게 )\n\n        const content = roadViewObj.id\n          ? `<div class=\"placeCustom\" style=\"display:flex; padding:10px; background-color:white; \">\n            <div style=\"margin-right:5px; font-size:20px; font-weight:600;\">${roadViewObj.place_name}</div>\n            <a target=\"_blank\" href=https://place.map.kakao.com/${roadViewObj.id}><button class=\"searchBtn\">검색</button></a>\n          </div>`\n          : `<div class=\"placeCustom\" style=\"display:flex; padding:10px; background-color:white; \">\n          <div style=\"margin-right:5px; font-size:20px; font-weight:600;\">${roadViewObj.place_name}</div>\n        </div>`;\n\n        const customOverlay = new kakao.maps.CustomOverlay({\n          position: positionObj,\n          content: content,\n          xAnchor: 0.3,\n          yAnchor: 1.9,\n        });\n        setMarker(roadMarker);\n        customOverlay.setMap(roadview);\n      } else {\n        if (document.querySelector(\"#roadview\"))\n          document.querySelector(\"#roadview\").style.opacity = \"0.3\";\n      }\n      setRoadObj(roadview);\n    });\n\n    // 지도위에 동동이를 드래그 할 수 있게 해보자.\n\n    // 동동이를 지도에 올려준다.\n\n    // 로드뷰가 초기화된 후 추가 이벤트를 등록한다.\n    // 로드뷰를 상,하,좌.우 .줌인 줌아웃을 할경우 발생\n\n    if (mapWalker !== null) mapWalker.setMap(map);\n    if (mapWalker) {\n      kakao.maps.event.addListener(roadview, \"viewpoint_changed\", function () {\n        const viewpoint = roadview.getViewpoint();\n        mapWalker.setAngle(viewpoint.pan);\n      });\n\n      // 로드뷰내의 화살표나 점프를 하였을 경우 발생하낟.\n      // position값이 바뀔 때마다 map walker의 상태를 변경해 준다.\n      kakao.maps.event.addListener(roadview, \"position_changed\", function () {\n        const position = roadview.getPosition();\n        mapWalker.setPosition(position);\n        map.setCenter(position);\n      });\n    }\n    setRoadmap(roadview);\n  }, [roadViewObj, mapWalker]);\n\n  useEffect(() => {\n    setMapWalker(\n      new MapWalker(\n        new kakao.maps.LatLng(parseInt(roadViewObj.y), parseInt(roadViewObj.x))\n      )\n    );\n  }, []);\n\n  useEffect(() => {\n    // 로드뷰가 다시 로드되면  마커가 보이도록 뷰포인트를 설정해주어야 한다.\n\n    if (marker && roadmap) {\n      setTimeout(() => {\n        const viewpoint = roadmap\n          .getProjection()\n          .viewpointFromCoords(marker.getPosition(), marker.getAltitude());\n        roadmap.setViewpoint(viewpoint);\n      }, 850);\n    }\n  }, [marker]);\n\n  useEffect(() => {\n    if (mapWalker) {\n      addEventHandle(mapWalker.content, \"mousedown\", onMouseDown);\n      addEventHandle(mapWalker.content, \"mouseup\", onMouseUp);\n    }\n  }, [mapWalker, map]);\n\n  return (\n    <Container\n      id=\"roadview\"\n      style={{ width: \"200px\", height: \"200px\" }}\n    ></Container>\n  );\n};\n\nexport default Roadview;\n\nRoadview.propTypes = {\n  roadViewObj: PropTypes.object,\n  map: PropTypes.object,\n  setRoadObj: PropTypes.func,\n  setRoadview: PropTypes.func,\n};\n","C:\\React\\where\\src\\Components\\MapButton.js",[],"C:\\React\\where\\src\\Components\\SocialLogin.js",[],"C:\\React\\where\\src\\Components\\EmailLogin.js",["107"],"import React, { useState } from \"react\";\n\nimport styled from \"styled-components\";\nimport { authService } from \"../firebase\";\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  input[type=\"email\"],\n  input[type=\"password\"] {\n    outline: none;\n    border: none;\n    background-color: #b2bec3;\n    border-radius: 10px;\n    color: white;\n    height: 30px;\n    width: 400px;\n    margin-bottom: 10px;\n    padding: 5px;\n    font-size: 20px;\n\n    &::placeholder {\n      color: white;\n      font-size: 20px;\n    }\n  }\n\n  input[type=\"submit\"] {\n    outline: none;\n    border: none;\n    border-radius: 20px;\n    height: 30px;\n    width: 400px;\n    margin-top: 10px;\n  }\n`;\n\nconst ToggleBtn = styled.button`\n  border-radius: 20px;\n  border: none;\n  outline: none;\n  height: 30px;\n  width: 400px;\n  margin-top: 5px;\n  margin-bottom: 30px;\n`;\n\nconst EmailLogin = ({ setError }) => {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [newUser, setNewUser] = useState(false);\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    let user;\n    // 제출을 하고 비워준다.\n    const inputs = e.target.querySelectorAll(\"input\");\n    inputs[0].value = \"\";\n    inputs[1].value = \"\";\n\n    try {\n      if (newUser) {\n        // 계정 생성을 해준다.\n        user = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        // 로그인을 해준다.\n        user = await authService.signInWithEmailAndPassword(email, password);\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const onChange = (e) => {\n    const {\n      target: { name, value },\n    } = e;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n\n  const toggleBtnClick = () => setNewUser((prev) => !prev);\n\n  return (\n    <>\n      <Form onSubmit={onSubmit}>\n        <input\n          onChange={onChange}\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"What is your Email?\"\n        />\n        <input\n          onChange={onChange}\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <input type=\"submit\" value={newUser ? \"Create\" : \"Log In\"} />\n      </Form>\n      <ToggleBtn onClick={toggleBtnClick}>\n        {newUser ? \"Sign In\" : \"Create\"}\n      </ToggleBtn>\n    </>\n  );\n};\n\nexport default EmailLogin;\n","C:\\React\\where\\src\\Components\\HomeMapWrapper.js",[],"C:\\React\\where\\src\\Components\\HomeSearchList.js",["108"],"import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { storeService } from \"../firebase\";\nimport { queryAllByAttribute } from \"@testing-library/react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSortDown, faSortUp } from \"@fortawesome/free-solid-svg-icons\";\n\nconst { kakao } = window;\n\nconst Container = styled.div`\n  z-index: 10;\n  position: absolute;\n  top: 30px;\n  right: 100px;\n  overflow: hidden;\n`;\n\nconst PlaceList = styled.div`\n  z-index: 10;\n  margin-top: 22px;\n  background-color: white;\n  height: 86vh;\n  overflow: auto;\n  li {\n    padding: 20px;\n    list-style: none;\n    border-bottom: 1px solid black;\n    button {\n      all: unset;\n      font-size: 15px;\n      box-shadow: 0px 1px 2px rgba(25, 25, 25, 0.5);\n      margin-left: 10px;\n      border: 1px solid black;\n      border-radius: 10px;\n      background-color: #34495e;\n      color: white;\n      padding: 2px;\n      &:active {\n        transform: scale(0.9, 0.9);\n      }\n    }\n  }\n\n  &.up {\n    @keyframes moveUp {\n      from {\n      }\n      to {\n        height: 0px;\n      }\n    }\n    @keyframes moveDown {\n      from {\n        height: 0px;\n      }\n      to {\n        height: 86vh;\n      }\n    }\n    animation: ${(props) =>\n      props.isUp\n        ? \"moveDown 0.3s linear forwards\"\n        : \"moveUp 0.3s linear forwards\"};\n\n    //animation: moveUp 0.3s linear forwards;\n  }\n`;\n\nconst ListUpButton = styled.div`\n  width: 30px;\n  position: absolute;\n  right: 0;\n  margin-left: 300px;\n  background-color: rgba(25, 25, 25, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n  &:active {\n    transform: scale(0.98, 0.98);\n  }\n`;\n\nconst ListItem = styled.div`\n  #Name {\n    font-weight: 600;\n    font-size: 20px;\n    margin-bottom: 10px;\n    span {\n      font-size: 15px;\n      margin-right: 10px;\n      border: 2px solid black;\n      padding: 2px;\n      border-radius: 50%;\n      background-color: #6397e0;\n      color: white;\n    }\n  }\n  #Address {\n    margin-bottom: 10px;\n  }\n  #SubInfo {\n    margin-bottom: 10px;\n    a {\n      margin-left: 10px;\n      text-decoration: none;\n      color: #e74c3c;\n    }\n  }\n`;\n\nconst HomeSearchList = ({ place, map, setRoadview, setError, userObj }) => {\n  const [isUp, setUp] = useState(true);\n\n  const handleListClick = (e) => {\n    e.preventDefault();\n    const {\n      currentTarget: { id },\n    } = e;\n    const where = place[parseInt(id)];\n\n    //클릭하는 순간 중심점을 이동시킨다.\n    const movePoint = new kakao.maps.LatLng(where.y, where.x);\n    map.panTo(movePoint);\n\n    // 목표물 표시\n    const center = document.querySelector(\"#map\").firstChild;\n    center.style.display = \"block\";\n    setTimeout(() => {\n      center.style.display = \"none\";\n    }, 4000);\n\n    //저장 버튼을 활성화 시킨다.  저장을 누르면 카테고리 별로 저장시킨다.\n    //e.currentTarget.lastChild.classList.toggle(\"display\");\n    setRoadview(where);\n  };\n\n  const handleSaveClick = async (e) => {\n    e.stopPropagation();\n    const attributes = [];\n    let save = true;\n    const {\n      target: {\n        parentNode: {\n          parentNode: {\n            parentNode: { id },\n          },\n        },\n      },\n    } = e;\n    const object = place[id];\n\n    //위 object를 파이어베이스에 저장해줘야 한다. //유저 아이디에 따라달리\n    // id의 따른 콜렉션을 만들어주고 그안에 장소들을 저장해준다.\n    let newPlace = {\n      ...object,\n      creator: userObj.uid,\n    };\n\n    const test = await storeService\n      .collection(`where-${userObj.uid}`)\n      .get(queryAllByAttribute);\n    test.forEach((item) => attributes.push(item.data()));\n\n    attributes.forEach((item) =>\n      item.place_name === newPlace.place_name ? (save = false) : \"\"\n    );\n    saveFunction(newPlace, save);\n  };\n\n  const saveFunction = async (newSavePlace, save) => {\n    if (save) {\n      await storeService.collection(`where-${userObj.uid}`).add(newSavePlace);\n    } else {\n      setError(\"이미 저장되어있는 장소입니다.\");\n    }\n  };\n\n  const listUpClick = (e) => {\n    setUp((prev) => !prev);\n  };\n\n  useEffect(() => {\n    setUp(true);\n  }, [place]);\n\n  return (\n    <Container>\n      {place.length !== 0 ? (\n        <ListUpButton onClick={listUpClick}>\n          {!isUp ? (\n            <FontAwesomeIcon icon={faSortDown}></FontAwesomeIcon>\n          ) : (\n            <FontAwesomeIcon icon={faSortUp}></FontAwesomeIcon>\n          )}\n        </ListUpButton>\n      ) : (\n        \"\"\n      )}\n      <PlaceList isUp={isUp} className=\"listBox up\">\n        {place.length !== 0\n          ? place.map((item, index) => (\n              <li\n                onClick={handleListClick}\n                key={index}\n                id={index}\n                className=\"list\"\n              >\n                <ListItem>\n                  <div id=\"Name\">\n                    <span>{index + 1}</span>\n                    {item.place_name}\n                  </div>\n                  <div id=\"Address\">{item.address_name}</div>\n                  <div id=\"SubInfo\">\n                    {item.phone}\n                    <a\n                      onClick={(e) => e.stopPropagation()}\n                      href={item.place_url}\n                      target=\"_blank\"\n                    >\n                      상세보기\n                    </a>\n                    <button onClick={handleSaveClick} className=\"display\">\n                      저장\n                    </button>\n                  </div>\n                </ListItem>\n              </li>\n            ))\n          : \"\"}\n      </PlaceList>\n    </Container>\n  );\n};\n\nexport default HomeSearchList;\n\nHomeSearchList.propTypes = {\n  place: PropTypes.array,\n  map: PropTypes.object,\n  setRoadview: PropTypes.func,\n  setError: PropTypes.func,\n  userObj: PropTypes.object.isRequired,\n};\n","C:\\React\\where\\src\\Components\\HomeSearchForm.js",[],"C:\\React\\where\\src\\Components\\MyMapWrapper.js",[],"C:\\React\\where\\src\\Components\\MyStoreKind.js",[],"C:\\React\\where\\src\\Components\\MyListWindow.js",["109","110"],"C:\\React\\where\\src\\Components\\MyListPackShare.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":37,"column":10,"nodeType":"117","messageId":"118","endLine":37,"endColumn":16},{"ruleId":"115","severity":1,"message":"119","line":38,"column":22,"nodeType":"117","messageId":"118","endLine":38,"endColumn":33},{"ruleId":"120","severity":1,"message":"121","line":60,"column":6,"nodeType":"122","endLine":60,"endColumn":16,"suggestions":"123"},{"ruleId":"115","severity":1,"message":"124","line":21,"column":10,"nodeType":"117","messageId":"118","endLine":21,"endColumn":15},{"ruleId":"115","severity":1,"message":"125","line":46,"column":11,"nodeType":"117","messageId":"118","endLine":46,"endColumn":17},{"ruleId":"120","severity":1,"message":"126","line":84,"column":6,"nodeType":"122","endLine":84,"endColumn":13,"suggestions":"127"},{"ruleId":"120","severity":1,"message":"128","line":94,"column":6,"nodeType":"122","endLine":94,"endColumn":8,"suggestions":"129"},{"ruleId":"120","severity":1,"message":"130","line":102,"column":6,"nodeType":"122","endLine":102,"endColumn":11,"suggestions":"131"},{"ruleId":"120","severity":1,"message":"132","line":199,"column":6,"nodeType":"122","endLine":199,"endColumn":30,"suggestions":"133"},{"ruleId":"120","severity":1,"message":"134","line":207,"column":6,"nodeType":"122","endLine":207,"endColumn":8,"suggestions":"135"},{"ruleId":"120","severity":1,"message":"136","line":220,"column":6,"nodeType":"122","endLine":220,"endColumn":14,"suggestions":"137"},{"ruleId":"120","severity":1,"message":"138","line":227,"column":6,"nodeType":"122","endLine":227,"endColumn":22,"suggestions":"139"},{"ruleId":"115","severity":1,"message":"140","line":71,"column":9,"nodeType":"117","messageId":"118","endLine":71,"endColumn":13},{"ruleId":"141","severity":1,"message":"142","line":222,"column":23,"nodeType":"143","endLine":222,"endColumn":38},{"ruleId":"144","severity":1,"message":"145","line":96,"column":23,"nodeType":"117","messageId":"146","endLine":96,"endColumn":33},{"ruleId":"141","severity":1,"message":"142","line":191,"column":42,"nodeType":"143","endLine":191,"endColumn":57},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'marker' is assigned a value but never used.","Identifier","unusedVar","'setControll' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'controller', 'isMyPage', 'positionObj', and 'setMap'. Either include them or remove the dependency array. If 'setMap' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["149"],"'error' is assigned a value but never used.","'listes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'map' and 'markers'. Either include them or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["151"],"React Hook useEffect has missing dependencies: 'initMarkerDraw' and 'places.length'. Either include them or remove the dependency array.",["152"],"React Hook useEffect has missing dependencies: 'map', 'marker', and 'setRoadObj'. Either include them or remove the dependency array. If 'setRoadObj' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["153"],"React Hook useEffect has missing dependencies: 'roadViewObj.x' and 'roadViewObj.y'. Either include them or remove the dependency array. If 'setMapWalker' needs the current value of 'roadViewObj.y', you can also switch to useReducer instead of useState and read 'roadViewObj.y' in the reducer.",["154"],"React Hook useEffect has a missing dependency: 'roadmap'. Either include it or remove the dependency array.",["155"],"React Hook useEffect has missing dependencies: 'onMouseDown' and 'onMouseUp'. Either include them or remove the dependency array.",["156"],"'user' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-self-assign","'changeText' is assigned to itself.","selfAssignment","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [controller, isMyPage, position, positionObj, setMap]",{"range":"173","text":"174"},"Update the dependencies array to be: [map, markers, place]",{"range":"175","text":"176"},"Update the dependencies array to be: [getData]",{"range":"177","text":"178"},"Update the dependencies array to be: [initMarkerDraw, map, places.length]",{"range":"179","text":"180"},"Update the dependencies array to be: [roadViewObj, mapWalker, map, setRoadObj, marker]",{"range":"181","text":"182"},"Update the dependencies array to be: [roadViewObj.x, roadViewObj.y]",{"range":"183","text":"184"},"Update the dependencies array to be: [marker, roadmap]",{"range":"185","text":"186"},"Update the dependencies array to be: [mapWalker, map, onMouseDown, onMouseUp]",{"range":"187","text":"188"},[1404,1414],"[controller, isMyPage, position, positionObj, setMap]",[2644,2651],"[map, markers, place]",[3131,3133],"[getData]",[3284,3289],"[initMarkerDraw, map, places.length]",[6202,6226],"[roadViewObj, mapWalker, map, setRoadObj, marker]",[6389,6391],"[roadViewObj.x, roadViewObj.y]",[6721,6729],"[marker, roadmap]",[6915,6931],"[mapWalker, map, onMouseDown, onMouseUp]"]